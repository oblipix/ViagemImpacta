using System.Text.Json;

class Program
{
    private static readonly HttpClient httpClient = new HttpClient();
    private const string API_BASE_URL = "http://localhost:5155/api";

    static async Task Main(string[] args)
    {
        Console.WriteLine("üìä AN√ÅLISE DETALHADA - ENDPOINT GETALLHOTELS");
        Console.WriteLine("=" + new string('=', 50));
        Console.WriteLine();

        await AnalyzeDatabase();
        Console.WriteLine("\nPressione qualquer tecla para sair...");
        Console.ReadKey();
    }

    static async Task AnalyzeDatabase()
    {
        try
        {
            var response = await httpClient.GetAsync($"{API_BASE_URL}/hotels");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var hotels = JsonSerializer.Deserialize<List<Hotel>>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                Console.WriteLine($"üè® TOTAL DE HOT√âIS: {hotels?.Count ?? 0}");
                Console.WriteLine();

                if (hotels != null && hotels.Any())
                {
                    var totalRooms = hotels.SelectMany(h => h.Rooms ?? new List<Room>()).Count();
                    var responseSize = System.Text.Encoding.UTF8.GetByteCount(content);

                    Console.WriteLine($"üõèÔ∏è  TOTAL DE QUARTOS: {totalRooms}");
                    Console.WriteLine($"üì¶ TAMANHO DA RESPOSTA: {responseSize:N0} bytes ({responseSize / 1024.0:F1} KB)");
                    Console.WriteLine($"üìà M√âDIA DE QUARTOS POR HOTEL: {totalRooms / (double)hotels.Count:F1}");
                    Console.WriteLine();

                    // An√°lise de performance baseada nos dados
                    Console.WriteLine("üéØ AN√ÅLISE DE PERFORMANCE:");
                    Console.WriteLine(new string('=', 50));

                    Console.WriteLine("\nüìä CEN√ÅRIO ATUAL:");
                    Console.WriteLine($"   ‚Ä¢ {hotels.Count} hot√©is com {totalRooms} quartos");
                    Console.WriteLine($"   ‚Ä¢ Resposta de {responseSize / 1024.0:F1} KB");
                    Console.WriteLine($"   ‚Ä¢ Include de {totalRooms} relacionamentos (N+1 potencial)");

                    Console.WriteLine("\nüö® PROBLEMAS IDENTIFICADOS:");
                    Console.WriteLine(new string('-', 40));

                    var issues = new List<string>();
                    var priorities = new List<string>();

                    // An√°lise de problemas
                    if (totalRooms > 50)
                        issues.Add($"‚ùå CR√çTICO: Muitos relacionamentos ({totalRooms} quartos loaded)");

                    if (responseSize > 20 * 1024)
                        issues.Add($"‚ùå CR√çTICO: Resposta muito grande ({responseSize / 1024.0:F1} KB)");

                    issues.Add("‚ùå CR√çTICO: Sem AsNoTracking() - EF rastreando mudan√ßas desnecessariamente");
                    issues.Add("‚ùå CR√çTICO: Sem pagina√ß√£o - carregando TODOS os hot√©is");
                    issues.Add("‚ùå CR√çTICO: Sem cache - consultando DB a cada request");
                    issues.Add("‚ö†Ô∏è  ALTO: Include eager loading pode causar N+1 queries");
                    issues.Add("‚ö†Ô∏è  ALTO: AutoMapper overhead em todos os objetos");
                    issues.Add("‚ö†Ô∏è  M√âDIO: Sem compress√£o de resposta");

                    foreach (var issue in issues)
                        Console.WriteLine($"   {issue}");

                    Console.WriteLine("\nüîß PRIORIDADES DE OTIMIZA√á√ÉO (EM ORDEM):");
                    Console.WriteLine(new string('=', 50));

                    Console.WriteLine("\n1. üö® PRIORIDADE CR√çTICA (implementar AGORA):");
                    Console.WriteLine("   ‚úÖ AsNoTracking() no Repository");
                    Console.WriteLine("   ‚úÖ Cache em mem√≥ria (5-10 min TTL)");
                    Console.WriteLine("   ‚úÖ Pagina√ß√£o b√°sica (PageSize: 10-20)");

                    Console.WriteLine("\n2. üî• PRIORIDADE ALTA (pr√≥xima sprint):");
                    Console.WriteLine("   ‚úÖ Projections espec√≠ficas (s√≥ campos necess√°rios)");
                    Console.WriteLine("   ‚úÖ Compress√£o Response (Gzip)");
                    Console.WriteLine("   ‚úÖ √çndices no banco de dados");

                    Console.WriteLine("\n3. üìä PRIORIDADE M√âDIA (futuro pr√≥ximo):");
                    Console.WriteLine("   ‚úÖ Lazy loading otimizado");
                    Console.WriteLine("   ‚úÖ Cache distribu√≠do (Redis)");
                    Console.WriteLine("   ‚úÖ Filtros query-string avan√ßados");

                    Console.WriteLine("\nüìà M√âTRICAS DE SUCESSO ESPERADAS:");
                    Console.WriteLine(new string('-', 50));
                    Console.WriteLine("   ‚Ä¢ Tempo resposta: < 50ms (95% requests)");
                    Console.WriteLine("   ‚Ä¢ Tamanho resposta: < 20KB por p√°gina");
                    Console.WriteLine("   ‚Ä¢ Suporte: 1000+ hot√©is simult√¢neos");
                    Console.WriteLine("   ‚Ä¢ Cache hit rate: > 80%");

                    Console.WriteLine("\nüéØ C√ìDIGO ESPEC√çFICO PARA IMPLEMENTAR:");
                    Console.WriteLine(new string('=', 50));
                    Console.WriteLine("1. HotelRepository.GetAllHotelsWithRoomsAsync():");
                    Console.WriteLine("   return await _context.Hotels");
                    Console.WriteLine("       .AsNoTracking()          // üöÄ CR√çTICO");
                    Console.WriteLine("       .Include(h => h.Rooms)");
                    Console.WriteLine("       .Skip((page-1)*pageSize) // üöÄ CR√çTICO");
                    Console.WriteLine("       .Take(pageSize)          // üöÄ CR√çTICO");
                    Console.WriteLine("       .ToListAsync();");
                    Console.WriteLine();
                    Console.WriteLine("2. HotelsController.GetAllHotels():");
                    Console.WriteLine("   // Adicionar cache + pagina√ß√£o");
                }
            }
            else
            {
                Console.WriteLine($"‚ùå ERRO: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå EXCE√á√ÉO: {ex.Message}");
        }
    }
}

public class Hotel
{
    public int HotelId { get; set; }
    public string Name { get; set; } = "";
    public string City { get; set; } = "";
    public int Stars { get; set; }
    public List<Room>? Rooms { get; set; }
}

public class Room
{
    public int RoomId { get; set; }
    public string TypeName { get; set; } = "";
    public decimal AverageDailyPrice { get; set; }
}
