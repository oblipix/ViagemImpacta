// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ViagemImpacta.Data;

#nullable disable

namespace ViagemImpacta.Migrations
{
    [DbContext(typeof(AgenciaDbContext))]
    [Migration("20250720151126_populateDb")]
    partial class populateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotelTravelPackage", b =>
                {
                    b.Property<int>("HotelsHotelId")
                        .HasColumnType("int");

                    b.Property<int>("TravelPackageId")
                        .HasColumnType("int");

                    b.HasKey("HotelsHotelId", "TravelPackageId");

                    b.HasIndex("TravelPackageId");

                    b.ToTable("TravelPackageHotels", (string)null);
                });

            modelBuilder.Entity("ViagemImpacta.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<bool>("Gym")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Parking")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Restaurant")
                        .HasColumnType("bit");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<bool>("Wifi")
                        .HasColumnType("bit");

                    b.HasKey("HotelId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            Gym = true,
                            Image = "copacabana-palace.jpg",
                            Location = "Rio de Janeiro, RJ",
                            Name = "Hotel Copacabana Palace",
                            Parking = true,
                            Phone = "(21) 2548-7070",
                            Restaurant = true,
                            Stars = 5,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 2,
                            Gym = true,
                            Image = "grand-hyatt-sp.jpg",
                            Location = "São Paulo, SP",
                            Name = "Grand Hyatt São Paulo",
                            Parking = true,
                            Phone = "(11) 2838-1234",
                            Restaurant = true,
                            Stars = 5,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 3,
                            Gym = true,
                            Image = "belmond-cataratas.jpg",
                            Location = "Foz do Iguaçu, PR",
                            Name = "Belmond Hotel das Cataratas",
                            Parking = true,
                            Phone = "(45) 2102-7000",
                            Restaurant = true,
                            Stars = 5,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 4,
                            Gym = false,
                            Image = "pousada-maravilha.jpg",
                            Location = "Fernando de Noronha, PE",
                            Name = "Pousada Maravilha",
                            Parking = false,
                            Phone = "(81) 3619-0028",
                            Restaurant = true,
                            Stars = 4,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 5,
                            Gym = true,
                            Image = "fasano-salvador.jpg",
                            Location = "Salvador, BA",
                            Name = "Hotel Fasano Salvador",
                            Parking = true,
                            Phone = "(71) 3206-6000",
                            Restaurant = true,
                            Stars = 5,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 6,
                            Gym = true,
                            Image = "casa-grande-gramado.jpg",
                            Location = "Gramado, RS",
                            Name = "Casa Grande Hotel Resort",
                            Parking = true,
                            Phone = "(54) 3295-1100",
                            Restaurant = true,
                            Stars = 4,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 7,
                            Gym = true,
                            Image = "tivoli-praia-forte.jpg",
                            Location = "Praia do Forte, BA",
                            Name = "Tivoli Ecoresort Praia do Forte",
                            Parking = true,
                            Phone = "(71) 3676-4000",
                            Restaurant = true,
                            Stars = 5,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 8,
                            Gym = true,
                            Image = "emiliano-sp.jpg",
                            Location = "São Paulo, SP",
                            Name = "Hotel Emiliano",
                            Parking = true,
                            Phone = "(11) 3069-4369",
                            Restaurant = true,
                            Stars = 5,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 9,
                            Gym = false,
                            Image = "pousada-etnia.jpg",
                            Location = "Trancoso, BA",
                            Name = "Pousada Etnia",
                            Parking = true,
                            Phone = "(73) 3668-1137",
                            Restaurant = true,
                            Stars = 4,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 10,
                            Gym = false,
                            Image = "villa-bahia.jpg",
                            Location = "Salvador, BA",
                            Name = "Hotel Villa Bahia",
                            Parking = false,
                            Phone = "(71) 3322-4271",
                            Restaurant = true,
                            Stars = 4,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 11,
                            Gym = false,
                            Image = "pousada-toby.jpg",
                            Location = "Búzios, RJ",
                            Name = "Pousada do Toby",
                            Parking = true,
                            Phone = "(22) 2623-1424",
                            Restaurant = true,
                            Stars = 4,
                            Wifi = true
                        },
                        new
                        {
                            HotelId = 12,
                            Gym = true,
                            Image = "amazonia-golf.jpg",
                            Location = "Manaus, AM",
                            Name = "Amazonia Golf Resort",
                            Parking = true,
                            Phone = "(92) 3215-7000",
                            Restaurant = true,
                            Stars = 4,
                            Wifi = true
                        });
                });

            modelBuilder.Entity("ViagemImpacta.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TravelPackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("ReservationId");

                    b.HasIndex("TravelPackageId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("ViagemImpacta.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TravelPackageId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("ReviewId");

                    b.HasIndex("TravelPackageId");

                    b.HasIndex("UserId1");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("ViagemImpacta.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<bool>("Accessible")
                        .HasColumnType("bit");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<decimal>("AverageDailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("GuestCount")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.HasIndex("HotelId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("ViagemImpacta.Models.TravelPackage", b =>
                {
                    b.Property<int>("TravelPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelPackageId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Destination")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Promotion")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TravelPackageId");

                    b.ToTable("TravelPackages");

                    b.HasData(
                        new
                        {
                            TravelPackageId = 1,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1859),
                            Description = "Explore a Cidade Maravilhosa com hospedagem no icônico Copacabana Palace. Inclui city tour, Cristo Redentor e Pão de Açúcar.",
                            Destination = "Rio de Janeiro",
                            EndDate = new DateTime(2025, 8, 24, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1859),
                            Price = 2850.00m,
                            Promotion = false,
                            StartDate = new DateTime(2025, 8, 19, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1842),
                            Title = "Rio de Janeiro Clássico",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1860)
                        },
                        new
                        {
                            TravelPackageId = 2,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1898),
                            Description = "Conheça a metrópole brasileira com conforto no Grand Hyatt. Inclui tours gastronômicos e culturais.",
                            Destination = "São Paulo",
                            EndDate = new DateTime(2025, 9, 6, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1897),
                            Price = 1750.00m,
                            Promotion = true,
                            StartDate = new DateTime(2025, 9, 3, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1896),
                            Title = "São Paulo Business & Lazer",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1898)
                        },
                        new
                        {
                            TravelPackageId = 3,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1901),
                            Description = "Experimente uma das maravilhas naturais do mundo com hospedagem exclusiva no Belmond Hotel das Cataratas.",
                            Destination = "Foz do Iguaçu",
                            EndDate = new DateTime(2025, 9, 22, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1901),
                            Price = 3200.00m,
                            Promotion = false,
                            StartDate = new DateTime(2025, 9, 18, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1900),
                            Title = "Cataratas do Iguaçu Luxo",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1902)
                        },
                        new
                        {
                            TravelPackageId = 4,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1905),
                            Description = "Paraíso ecológico com hospedagem na Pousada Maravilha. Inclui mergulho e trilhas ecológicas.",
                            Destination = "Fernando de Noronha",
                            EndDate = new DateTime(2025, 10, 25, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1904),
                            Price = 4500.00m,
                            Promotion = false,
                            StartDate = new DateTime(2025, 10, 18, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1904),
                            Title = "Fernando de Noronha Exclusivo",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1905)
                        },
                        new
                        {
                            TravelPackageId = 5,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1908),
                            Description = "Mergulhe na cultura baiana com hospedagem no Fasano Salvador. City tour pelo Pelourinho incluído.",
                            Destination = "Salvador",
                            EndDate = new DateTime(2025, 10, 7, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1908),
                            Price = 2100.00m,
                            Promotion = true,
                            StartDate = new DateTime(2025, 10, 3, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1907),
                            Title = "Salvador Cultural",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1909)
                        },
                        new
                        {
                            TravelPackageId = 6,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1913),
                            Description = "Charme da Serra Gaúcha no Casa Grande Hotel Resort. Inclui degustações e passeios românticos.",
                            Destination = "Gramado",
                            EndDate = new DateTime(2025, 9, 12, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1912),
                            Price = 1890.00m,
                            Promotion = false,
                            StartDate = new DateTime(2025, 9, 8, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1911),
                            Title = "Gramado Romântico",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1913)
                        },
                        new
                        {
                            TravelPackageId = 7,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1916),
                            Description = "Resort all inclusive no Tivoli Ecoresort. Inclui todas as refeições e atividades aquáticas.",
                            Destination = "Praia do Forte",
                            EndDate = new DateTime(2025, 9, 5, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1915),
                            Price = 3800.00m,
                            Promotion = true,
                            StartDate = new DateTime(2025, 8, 29, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1915),
                            Title = "Praia do Forte All Inclusive",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1917)
                        },
                        new
                        {
                            TravelPackageId = 8,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1920),
                            Description = "Experiência premium no Hotel Emiliano. Inclui jantares em restaurantes estrelados.",
                            Destination = "São Paulo",
                            EndDate = new DateTime(2025, 8, 27, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1919),
                            Price = 2950.00m,
                            Promotion = false,
                            StartDate = new DateTime(2025, 8, 24, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1918),
                            Title = "São Paulo Premium",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1920)
                        },
                        new
                        {
                            TravelPackageId = 9,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1923),
                            Description = "Charme e sofisticação na Pousada Etnia. Inclui passeios pela Costa do Descobrimento.",
                            Destination = "Trancoso",
                            EndDate = new DateTime(2025, 10, 14, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1922),
                            Price = 3150.00m,
                            Promotion = false,
                            StartDate = new DateTime(2025, 10, 8, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1922),
                            Title = "Trancoso Boutique",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1924)
                        },
                        new
                        {
                            TravelPackageId = 10,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1927),
                            Description = "Imersão na história brasileira no Hotel Villa Bahia. City tour pelo centro histórico incluído.",
                            Destination = "Salvador",
                            EndDate = new DateTime(2025, 9, 17, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1927),
                            Price = 1680.00m,
                            Promotion = true,
                            StartDate = new DateTime(2025, 9, 13, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1926),
                            Title = "Salvador Histórico",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1928)
                        },
                        new
                        {
                            TravelPackageId = 11,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1931),
                            Description = "Relax e charme na Pousada do Toby. Inclui passeios de barco pelas praias mais belas.",
                            Destination = "Búzios",
                            EndDate = new DateTime(2025, 9, 28, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1930),
                            Price = 2240.00m,
                            Promotion = false,
                            StartDate = new DateTime(2025, 9, 23, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1929),
                            Title = "Búzios Charmoso",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1931)
                        },
                        new
                        {
                            TravelPackageId = 12,
                            Active = true,
                            CreatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1934),
                            Description = "Aventura na floresta amazônica no Amazonia Golf Resort. Inclui pesca esportiva e trilhas ecológicas.",
                            Destination = "Manaus",
                            EndDate = new DateTime(2025, 11, 4, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1933),
                            Price = 2780.00m,
                            Promotion = false,
                            StartDate = new DateTime(2025, 10, 28, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1933),
                            Title = "Amazônia Aventura",
                            UpdatedAt = new DateTime(2025, 7, 20, 12, 11, 26, 357, DateTimeKind.Local).AddTicks(1935)
                        });
                });

            modelBuilder.Entity("ViagemImpacta.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HotelTravelPackage", b =>
                {
                    b.HasOne("ViagemImpacta.Models.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ViagemImpacta.Models.TravelPackage", null)
                        .WithMany()
                        .HasForeignKey("TravelPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ViagemImpacta.Models.Reservation", b =>
                {
                    b.HasOne("ViagemImpacta.Models.TravelPackage", "TravelPackage")
                        .WithMany("Reservations")
                        .HasForeignKey("TravelPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ViagemImpacta.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId1");

                    b.Navigation("TravelPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ViagemImpacta.Models.Review", b =>
                {
                    b.HasOne("ViagemImpacta.Models.TravelPackage", "TravelPackage")
                        .WithMany("Reviews")
                        .HasForeignKey("TravelPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ViagemImpacta.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId1");

                    b.Navigation("TravelPackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ViagemImpacta.Models.Room", b =>
                {
                    b.HasOne("ViagemImpacta.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("ViagemImpacta.Models.Hotel", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ViagemImpacta.Models.TravelPackage", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ViagemImpacta.Models.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
