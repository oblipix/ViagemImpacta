// Teste r√°pido do cache - adicione este c√≥digo no console do navegador

// Teste simples do cache
async function testCacheSimples() {
  console.log('üß™ Testando cache do hotelService...');
  
  // Limpa cache primeiro
  hotelService.clearCache();
  console.log('Cache limpo');
  
  // Primeira chamada - deve fazer requisi√ß√£o √† API
  console.time('Primeira chamada getAllHotels');
  try {
    const hotels1 = await hotelService.getAllHotels();
    console.timeEnd('Primeira chamada getAllHotels');
    console.log(`‚úÖ Primeira chamada: ${hotels1.length} hot√©is encontrados`);
    
    // Segunda chamada - deve usar cache
    console.time('Segunda chamada getAllHotels (cache)');
    const hotels2 = await hotelService.getAllHotels();
    console.timeEnd('Segunda chamada getAllHotels (cache)');
    console.log(`‚úÖ Segunda chamada: ${hotels2.length} hot√©is encontrados`);
    
    // Verifica se os dados s√£o os mesmos
    const sameData = JSON.stringify(hotels1) === JSON.stringify(hotels2);
    console.log(`‚úÖ Dados id√™nticos: ${sameData}`);
    
    // Mostra informa√ß√µes do cache
    const cacheInfo = hotelService.getCacheInfo();
    console.log('üìä Info do cache:', cacheInfo);
    
    return { success: true, hotels1, hotels2, sameData, cacheInfo };
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return { success: false, error };
  }
}

// Teste com filtros
async function testCacheComFiltros() {
  console.log('üß™ Testando cache do getHotelsWithFilters...');
  
  const filters = { destination: 'Rio de Janeiro' };
  
  try {
    // Primeira chamada - deve fazer requisi√ß√£o √† API
    console.time('Primeira chamada com filtros');
    const hotels1 = await hotelService.getHotelsWithFilters(filters);
    console.timeEnd('Primeira chamada com filtros');
    console.log(`‚úÖ Primeira chamada: ${hotels1.length} hot√©is encontrados`);
    
    // Segunda chamada - deve usar cache
    console.time('Segunda chamada com filtros (cache)');
    const hotels2 = await hotelService.getHotelsWithFilters(filters);
    console.timeEnd('Segunda chamada com filtros (cache)');
    console.log(`‚úÖ Segunda chamada: ${hotels2.length} hot√©is encontrados`);
    
    // Verifica se os dados s√£o os mesmos
    const sameData = JSON.stringify(hotels1) === JSON.stringify(hotels2);
    console.log(`‚úÖ Dados id√™nticos: ${sameData}`);
    
    return { success: true, hotels1, hotels2, sameData };
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return { success: false, error };
  }
}

// Disponibiliza as fun√ß√µes globalmente
window.testCacheSimples = testCacheSimples;
window.testCacheComFiltros = testCacheComFiltros;

console.log('üß™ Fun√ß√µes de teste dispon√≠veis:');
console.log('- testCacheSimples()');
console.log('- testCacheComFiltros()');
console.log('- hotelService.getCacheInfo()');
console.log('- hotelService.clearCache()');
